name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  check-external-types:
    uses: taiki-e/workflows/.github/workflows/check-external-types.yml@main
  deny:
    uses: taiki-e/workflows/.github/workflows/deny.yml@main
  docs:
    uses: taiki-e/workflows/.github/workflows/docs.yml@main
  msrv:
    uses: taiki-e/workflows/.github/workflows/msrv.yml@main
    with:
      event_name: ${{ github.event_name }}
      args: -vvv --feature-powerset --optional-deps
  tidy:
    uses: taiki-e/workflows/.github/workflows/tidy.yml@main

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: '1.59'
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: '1.59'
            target: aarch64-unknown-linux-gnu
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64_be-unknown-linux-gnu
          - rust: stable
            target: arm-unknown-linux-gnueabi
          - rust: nightly
            target: arm-unknown-linux-gnueabi
          # TODO: setup-cross-toolchain-action doesn't support them yet.
          # cross miscompiles them as armv7.
          # - rust: stable
          #   target: arm-unknown-linux-gnueabihf
          # - rust: nightly
          #   target: arm-unknown-linux-gnueabihf
          - rust: stable
            target: armv7-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabi
          - rust: stable
            target: armv7-unknown-linux-gnueabihf
          - rust: nightly
            target: armv7-unknown-linux-gnueabihf
          - rust: stable
            target: i586-unknown-linux-gnu
          - rust: nightly
            target: i586-unknown-linux-gnu
          - rust: stable
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: mips-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: mips-unknown-linux-gnu
          - rust: nightly
            target: mipsel-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: mipsel-unknown-linux-gnu
          - rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: mips64-unknown-linux-gnuabi64
          - rust: nightly
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly
            target: powerpc-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: powerpc-unknown-linux-gnu
          - rust: nightly
            target: powerpc64-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: powerpc64-unknown-linux-gnu
          - rust: nightly
            target: powerpc64le-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: powerpc64le-unknown-linux-gnu
          - rust: nightly
            target: riscv32gc-unknown-linux-gnu
          - rust: stable
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: s390x-unknown-linux-gnu
          - rust: nightly-2023-05-09 # Rust 1.71, LLVM 16 (oldest version we can implement atomic RMWs on this target)
            target: s390x-unknown-linux-gnu
          - rust: nightly-2021-12-16 # Rust 1.59, LLVM 13 (oldest version we can use asm_experimental_arch on this target)
            target: s390x-unknown-linux-gnu
            tests: --tests # doctest needs atomic RMWs
          - rust: stable
            target: thumbv7neon-unknown-linux-gnueabihf
          - rust: nightly
            target: thumbv7neon-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - run: |
          lscpu
          sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
        if: startsWith(matrix.os, 'ubuntu') || matrix.os == ''
      - run: |
          sysctl hw.optional machdep.cpu
          brew install moreutils
        if: startsWith(matrix.os, 'macos')
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      - run: rustup toolchain add nightly --no-self-update
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: cargo-careful
        if: startsWith(matrix.rust, 'nightly')
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''
      - run: echo "RUSTFLAGS=${RUSTFLAGS} --cfg qemu" >>"${GITHUB_ENV}"
        if: matrix.target != '' && !startsWith(matrix.target, 'i686') && !startsWith(matrix.target, 'x86_64')
      - run: echo "TARGET=--target ${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''

      - run: tools/test.sh -vv ${{ matrix.tests }} $TARGET $DOCTEST_XCOMPILE $BUILD_STD
      # We test doctest only once with the default build conditions because doctest is slow.
      # src/tests has extended copies of doctest, so this will not reduce test coverage.
      # +cmpxchg16b
      # macOS is skipped because it is +cmpxchg16b by default
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
        if: (matrix.target == '' || startsWith(matrix.target, 'x86_64')) && !startsWith(matrix.os, 'macos')
      # -sse2
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=-sse2
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=-sse2
        if: startsWith(matrix.target, 'i686')
      # +lse
      # As of QEMU 8.0, QEMU has not yet implemented FEAT_LSE2: https://linaro.atlassian.net/browse/QEMU-300
      # FEAT_LSE2 is tested on Cirrus CI's aarch64 macOS VM.
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      # +rcpc
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+rcpc
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+rcpc
          # cortex-a76 is armv8.2-a but supports armv8.3-a LDAPR instructions.
          QEMU_CPU: cortex-a76
        if: startsWith(matrix.target, 'aarch64')
      # pwr7
      # powerpc64- (big-endian) is skipped because it is pre-pwr8 by default
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr7
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr7
        if: startsWith(matrix.target, 'powerpc64le-')
      # pwr8
      # powerpc64le- (little-endian) is skipped because it is pwr8 by default
      - run: tools/test.sh -vv --tests $TARGET $DOCTEST_XCOMPILE $BUILD_STD
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')

      - run: cargo minimal-versions build -vvv --workspace --all-features --ignore-private $TARGET $BUILD_STD

  build:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - '1.59'
          - stable
          - beta
          - nightly
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      - uses: taiki-e/install-action@cargo-hack
      - run: tools/build.sh

  no-std:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends qemu-system-arm
      - run: tools/no-std.sh

  valgrind:
    env:
      VALGRIND: valgrind
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
      - uses: taiki-e/install-action@valgrind
      - run: tools/test.sh -vv
      # +cmpxchg16b
      - run: tools/test.sh -vv
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
