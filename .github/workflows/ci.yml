name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  check-external-types:
    uses: taiki-e/workflows/.github/workflows/check-external-types.yml@main
  deny:
    uses: taiki-e/workflows/.github/workflows/deny.yml@main
  docs:
    uses: taiki-e/workflows/.github/workflows/docs.yml@main
  msrv:
    uses: taiki-e/workflows/.github/workflows/msrv.yml@main
    with:
      event_name: ${{ github.event_name }}
      args: -vvv --feature-powerset --optional-deps
  tidy:
    uses: taiki-e/workflows/.github/workflows/tidy-rust.yml@main

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: '1.59'
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          # TODO: broken since nightly-2022-10-28
          # - rust: nightly
          #   target: aarch64_be-unknown-linux-gnu
          #   os: ubuntu-22.04
          - rust: stable
            target: arm-unknown-linux-gnueabi
          - rust: nightly
            target: arm-unknown-linux-gnueabi
          # TODO: setup-cross-toolchain-action doesn't support them yet.
          # cross miscompiles them as armv7.
          # - rust: stable
          #   target: arm-unknown-linux-gnueabihf
          # - rust: nightly
          #   target: arm-unknown-linux-gnueabihf
          - rust: stable
            target: armv7-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabi
          - rust: stable
            target: armv7-unknown-linux-gnueabihf
          - rust: nightly
            target: armv7-unknown-linux-gnueabihf
          - rust: stable
            target: i586-unknown-linux-gnu
          - rust: nightly
            target: i586-unknown-linux-gnu
          - rust: stable
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: mips-unknown-linux-gnu
            os: ubuntu-22.04
          - rust: nightly
            target: mipsel-unknown-linux-gnu
          - rust: nightly
            target: mips64-unknown-linux-gnuabi64
            os: ubuntu-22.04
          - rust: nightly
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly
            target: powerpc-unknown-linux-gnu
            os: ubuntu-22.04
          - rust: nightly
            target: powerpc64-unknown-linux-gnu
            os: ubuntu-22.04
          - rust: nightly
            target: powerpc64le-unknown-linux-gnu
          - rust: nightly
            target: riscv32gc-unknown-linux-gnu
          - rust: stable
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: s390x-unknown-linux-gnu
          - rust: stable
            target: thumbv7neon-unknown-linux-gnueabihf
          - rust: nightly
            target: thumbv7neon-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update --component rust-src && rustup default ${{ matrix.rust }}
      - run: rustup toolchain add nightly --no-self-update
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''
      - run: echo "RUSTFLAGS=${RUSTFLAGS} --cfg qemu" >>"${GITHUB_ENV}"
        if: startsWith(matrix.target, 'powerpc64')
      - run: echo "TARGET=--target ${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''

      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat

      # +cmpxchg16b
      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')

      # -sse2
      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=-sse2
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=-sse2
        if: startsWith(matrix.target, 'i686')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=-sse2
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=-sse2
        if: startsWith(matrix.target, 'i686')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=-sse2
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=-sse2
        if: startsWith(matrix.target, 'i686')

      # +lse
      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      # TODO: it seems qemu-user has not yet properly implemented FEAT_LSE2: https://github.com/taiki-e/portable-atomic/pull/11#issuecomment-1114044327

      # pwr7
      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr7
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr7
        if: startsWith(matrix.target, 'powerpc64le-')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr7
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr7
        if: startsWith(matrix.target, 'powerpc64le-')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr7
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr7
        if: startsWith(matrix.target, 'powerpc64le-')

      # pwr8
      - run: cargo test -vv --workspace --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')
      - run: cargo test -vv --workspace --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')

      - run: cargo minimal-versions build -vvv --workspace --all-features --ignore-private $TARGET $BUILD_STD

  build:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - '1.59'
          - stable
          - beta
          - nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update --component rust-src && rustup default ${{ matrix.rust }}
      - uses: taiki-e/install-action@cargo-hack
      - run: tools/build.sh

  no-std:
    runs-on: ubuntu-22.04 # QEMU 6.2
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends qemu-system-arm
      - run: tools/no-std.sh

  valgrind:
    env:
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - uses: taiki-e/install-action@valgrind
      # doctests on Valgrind are very slow
      - run: cargo test -vv --workspace --all-features --tests
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      - run: cargo test -vv --workspace --all-features --release --tests
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      - run: cargo test -vv --workspace --all-features --release --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      # +cmpxchg16b
      - run: cargo test -vv --workspace --all-features --tests
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b
      - run: cargo test -vv --workspace --all-features --release --tests
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b
      - run: cargo test -vv --workspace --all-features --release --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind -C target-feature=+cmpxchg16b

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    # prettier-ignore
    needs: [check-external-types, deny, docs, msrv, tidy, test, build, no-std, valgrind] # tidy:needs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
