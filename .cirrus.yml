only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'main' || $CIRRUS_BRANCH == 'dev')
auto_cancellation: $CIRRUS_PR != ''
env:
  CARGO_INCREMENTAL: '0'
  CARGO_NET_GIT_FETCH_WITH_CLI: 'true'
  CARGO_NET_RETRY: '10'
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: 'sparse'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'
  RUST_TEST_THREADS: '1'
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: '10'

aarch64_linux_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-unknown-linux-gnu
    RUSTDOCFLAGS: -D warnings --cfg weak_memory
    RUSTFLAGS: -D warnings --cfg weak_memory
  arm_container:
    image: rust:latest
  setup_script:
    - set -ex
    - lscpu
    - rustup toolchain add nightly --no-self-update --component rust-src && rustup default nightly
  test_script:
    - set -ex
    - ./tools/test.sh -vv
    # +lse
    # Graviton2 (Neoverse N1) is ARMv8.2-a and doesn't support FEAT_LSE2.
    # FEAT_LSE2 is tested on aarch64 macOS VM.
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" ./tools/test.sh -vv
    # +rcpc
    # Graviton2 is armv8.2-a but supports armv8.3-a LDAPR instructions.
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+rcpc" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+rcpc" ./tools/test.sh -vv

aarch64_macos_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-apple-darwin
    RUSTDOCFLAGS: -D warnings --cfg weak_memory
    RUSTFLAGS: -D warnings --cfg weak_memory
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-xcode:latest
  setup_script:
    - set -ex
    - sysctl hw.optional machdep.cpu
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --component rust-src
  test_script:
    - . $HOME/.cargo/env
    - set -ex
    # macOS is +lse,+lse2 by default
    - ./tools/test.sh -vv

aarch64_linux_valgrind_task:
  name: valgrind ($TARGET)
  env:
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    RUSTDOCFLAGS: -D warnings --cfg valgrind
    RUSTFLAGS: -D warnings --cfg valgrind
    TARGET: aarch64-unknown-linux-gnu
  arm_container:
    # Valgrind support ldxp/stxp on 3.19+: https://valgrind.org/docs/manual/dist.news.html
    # However, current Debian stable's Valgrind is 3.16: https://packages.debian.org/en/stable/valgrind
    image: debian:bookworm
  setup_script:
    - set -ex
    - lscpu
    - apt-get -o Acquire::Retries=10 -qq update && apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends valgrind ca-certificates curl gcc git libc6-dev
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --component rust-src
  test_script:
    - . $HOME/.cargo/env
    - set -ex
    # doctests on Valgrind are very slow
    - ./tools/test.sh -vv --tests
    # +lse
    # As of Valgrind 3.19, Valgrind supports atomic instructions of ARMv8.0 and ARMv8.1 (FEAT_LSE).
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" ./tools/test.sh -vv --tests
